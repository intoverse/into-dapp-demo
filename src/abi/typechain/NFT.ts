/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface NFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BatchDevMint"
      | "DevMint"
      | "Mint"
      | "USDT"
      | "addAdmin"
      | "allAdmins"
      | "amountForType"
      | "fundAddress"
      | "getStudioList"
      | "isAdmin"
      | "mintPause"
      | "mintStats"
      | "onft"
      | "price"
      | "relation"
      | "removeAdmin"
      | "renounceAdmin"
      | "setFundAddress"
      | "setPause"
      | "setRelation"
      | "setStudioAdmin"
      | "studioAmount"
      | "studioList"
      | "studioListLength"
      | "studioStats"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AdminAdded" | "AdminRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BatchDevMint",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "DevMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "Mint", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "USDT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "allAdmins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "amountForType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStudioList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintPause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "onft", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "relation", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFundAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPause",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStudioAdmin",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "studioAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "studioList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "studioListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "studioStats",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BatchDevMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "DevMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "USDT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountForType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStudioList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintPause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relation", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRelation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStudioAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studioAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "studioList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "studioListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "studioStats",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRemovedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NFT extends BaseContract {
  connect(runner?: ContractRunner | null): NFT;
  waitForDeployment(): Promise<this>;

  interface: NFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BatchDevMint: TypedContractMethod<
    [addrs: AddressLike[], typeIDs: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  DevMint: TypedContractMethod<
    [addr: AddressLike, typeID: BigNumberish],
    [void],
    "nonpayable"
  >;

  Mint: TypedContractMethod<[typeID: BigNumberish], [void], "nonpayable">;

  USDT: TypedContractMethod<[], [string], "view">;

  addAdmin: TypedContractMethod<[account: AddressLike], [void], "nonpayable">;

  allAdmins: TypedContractMethod<[], [string[]], "view">;

  amountForType: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  fundAddress: TypedContractMethod<[], [string], "view">;

  getStudioList: TypedContractMethod<[], [string[]], "view">;

  isAdmin: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  mintPause: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  mintStats: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  onft: TypedContractMethod<[], [string], "view">;

  price: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  relation: TypedContractMethod<[], [string], "view">;

  removeAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceAdmin: TypedContractMethod<[], [void], "nonpayable">;

  setFundAddress: TypedContractMethod<
    [addr: AddressLike],
    [void],
    "nonpayable"
  >;

  setPause: TypedContractMethod<
    [typeId: BigNumberish, value: boolean],
    [void],
    "nonpayable"
  >;

  setRelation: TypedContractMethod<
    [relation_: AddressLike],
    [void],
    "nonpayable"
  >;

  setStudioAdmin: TypedContractMethod<
    [addr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  studioAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  studioList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  studioListLength: TypedContractMethod<[], [bigint], "view">;

  studioStats: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BatchDevMint"
  ): TypedContractMethod<
    [addrs: AddressLike[], typeIDs: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "DevMint"
  ): TypedContractMethod<
    [addr: AddressLike, typeID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "Mint"
  ): TypedContractMethod<[typeID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "USDT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allAdmins"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "amountForType"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStudioList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintPause"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintStats"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onft"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "relation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFundAddress"
  ): TypedContractMethod<[addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPause"
  ): TypedContractMethod<
    [typeId: BigNumberish, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRelation"
  ): TypedContractMethod<[relation_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStudioAdmin"
  ): TypedContractMethod<
    [addr: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "studioAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "studioList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "studioListLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "studioStats"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRemoved"
  ): TypedContractEvent<
    AdminRemovedEvent.InputTuple,
    AdminRemovedEvent.OutputTuple,
    AdminRemovedEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRemoved(address)": TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
    AdminRemoved: TypedContractEvent<
      AdminRemovedEvent.InputTuple,
      AdminRemovedEvent.OutputTuple,
      AdminRemovedEvent.OutputObject
    >;
  };
}
